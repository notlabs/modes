version: '3.8'

name: modes

services:
  db:
    image: postgres:15-alpine
    restart: always
    user: postgres
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - caddy

  api:
    image: node:20-alpine
    restart: always
    working_dir: /app
    volumes:
      - ./dist/apps/api:/app:ro
    command: ['node', 'main.js']
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - caddy

  web:
    image: nginx:alpine
    restart: always
    volumes:
      - ./dist/apps/web:/usr/share/nginx/html:ro
      - ./apps/web/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - caddy
    depends_on:
      - db
      - api
    labels:
      caddy: ${DOMAIN}
      caddy.reverse_proxy: '{{upstreams 80}}'

volumes:
  postgres_data:

networks:
  caddy:
    external: true
