version: '3.8'

services:
  db:
    image: postgres:15-alpine
    restart: always
    user: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "sh -c 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}'",
        ]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - caddy

  web:
    image: nginx:alpine
    restart: always
    volumes:
      - ./dist/apps/web:/usr/share/nginx/html
      - ./apps/web/nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - caddy
    depends_on:
      - db
      - api
    labels:
      caddy: ${DOMAIN}
      caddy.handle: /*
      caddy.reverse_proxy: '{{upstreams 80}}'

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    restart: always
    environment:
      - NODE_ENV=production
    depends_on:
      db:
        condition: service_healthy
    networks:
      - caddy
    labels:
      caddy: ${DOMAIN}
      caddy.handle: /api/*
      caddy.reverse_proxy: '{{upstreams 3000}}'

volumes:
  postgres_data:

networks:
  caddy:
    external: true
